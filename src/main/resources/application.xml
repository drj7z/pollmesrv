<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd">

  <!-- Tag: AOP -->
  <aop:aspectj-autoproxy/>
  
  <bean id="serverLoggingAspect" class="net.ddns.drj7z.pollme.pollmesrv.logging.ServerLoggingAspect"/>
  <bean id="communicationLoggingAspect" class="net.ddns.drj7z.pollme.pollmesrv.logging.CommunicationLoggingAspect"/>
  <!-- End-Of-Tag: AOP -->
  
  <!-- Tag: logging  -->
  <!-- log4j levels:
    TRACE,
		DEBUG,
		INFO,
		WARN,
		ERROR and
		FATAL
  -->
  <bean id="loggerInjector" class="net.ddns.drj7z.pollme.pollmesrv.support.springframework.LoggerInjector"/>
  <!--  End-Of-Tag: logging -->

  <!-- Tag: persistence -->
  <!--  TODO move in properties placeholder -->
  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" 
        destroy-method="close" lazy-init="true">
    <property name="driverClassName" value="org.sqlite.JDBC" />
    <property name="url" value="jdbc:sqlite:pollmesrv.db" />
    <property name="initialSize" value="2" />
    <property name="maxActive" value="20" />
    <property name="maxIdle" value="5" />
    <property name="poolPreparedStatements" value="true" />
	</bean>
	
	<bean id="persistenceManagerFactory" class="org.datanucleus.api.jdo.JDOPersistenceManagerFactory" 
	      destroy-method="close">
	  <property name="connectionFactory" ref="dataSource"/>
	  <property name="nontransactionalRead" value="true"/>
	</bean>

	<bean id="persistenceManagerFactoryProxy"
	      class="org.springframework.orm.jdo.TransactionAwarePersistenceManagerFactoryProxy">
	  <property name="targetPersistenceManagerFactory" ref="persistenceManagerFactory"/>
	  <property name="allowCreate" value="false"/>
	</bean>
	
	 <!-- Tag: dao -->
	 <bean id="accountDao" class="net.ddns.drj7z.pollme.pollmesrv.persistence.jdo.dao.AccountDaoImpl">
	   <property name="persistenceManagerFactory" ref="persistenceManagerFactoryProxy"/>
	 </bean>
	 <!-- End-Of-Tag: dao -->

  <bean id="transactionManager" class="org.springframework.orm.jdo.JdoTransactionManager">
    <property name="persistenceManagerFactory" ref="persistenceManagerFactory"/>
  </bean>

  <tx:advice id="txAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <tx:method name="*" propagation="REQUIRED"/>
    </tx:attributes>
  </tx:advice>

  <aop:config>
    <aop:pointcut id="serviceMethods" expression="execution(* net.ddns.drj7z.pollme.pollmesrv.action.*.*Service*.*(..))"/>
    <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>
  </aop:config>

  <!-- End-Of-Tag: persistence -->

  <!-- Tag: action -->
  
	  <!-- Tag: register-action -->
    <bean id="registerService" class="net.ddns.drj7z.pollme.pollmesrv.action.register.RegisterServiceImpl">
      <property name="accountDao" ref="accountDao"/>
    </bean>
		<bean id="registerAction" class="net.ddns.drj7z.pollme.pollmesrv.action.register.RegisterActionImpl">
		  <property name="registerService" ref="registerService"/>
		</bean>
    <!-- End-Of-Tag: register-action -->

  <bean id="actionFactory" class="net.ddns.drj7z.pollme.pollmesrv.action.ActionFactorySimple"
        factory-method="getInstance">
    <property name="actions">
      <map>
        <entry key="register" value-ref="registerAction"/>
      </map>
    </property>
  </bean>
  <!-- End-Of-Tag: action -->

  
  <!-- Tag: JSON / Gson -->

  <bean id="jsonEncoder" class="net.ddns.drj7z.pollme.pollmesrv.communication.json.gson.JsonEncoderGson"/>

  <!-- End-Of-Tag: JSON / Gson -->

  <bean id="communicator" class="net.ddns.drj7z.pollme.pollmesrv.communication.TcpCommunicator"
    scope="prototype"/>
	
	<bean id="packetReceiver" class="net.ddns.drj7z.pollme.pollmesrv.communication.PacketReceiverSimple">
    <property name="jsonEncoder" ref="jsonEncoder"/>
  </bean>
	
	<bean id="serverThread" class="net.ddns.drj7z.pollme.pollmesrv.ServerThreadSimple"
	      scope="prototype">
    <constructor-arg ref="actionFactory"/>
    <!--  TODO move in properties placeholder -->
    <constructor-arg value="1000"/>
	</bean>
	
	<bean id="executorService" class="java.util.concurrent.Executors" 
	      factory-method="newFixedThreadPool"
	      destroy-method="shutdown">
    <!--  TODO move in properties placeholder -->
	 <constructor-arg value="128"/>
	</bean>
	
  <bean id="serverThreadBuilder" class="net.ddns.drj7z.pollme.pollmesrv.TcpServerThreadBuilder">
     <lookup-method name="createCommunicator" bean="communicator"/>
     <lookup-method name="createPacketReceiver" bean="packetReceiver"/>
     <lookup-method name="createServerThread" bean="serverThread"/>
  </bean>

  <bean id="serverThreadSpawner" class="net.ddns.drj7z.pollme.pollmesrv.ServerThreadSpawnerNew">
     <constructor-arg ref="executorService"/>
     <constructor-arg ref="serverThreadBuilder"/>
  </bean>

  <bean id="server" class="net.ddns.drj7z.pollme.pollmesrv.Server">
    <!--  <constructor-arg ref="executorService"/> -->
    <constructor-arg ref="serverThreadSpawner"/>  

    <!--  TODO move in properties placeholder -->
    <property name="serverPort" value="7001"/>   
  </bean>

</beans>